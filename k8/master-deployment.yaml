apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: second-app
  ports:
    - protocol: 'TCP'
      port: 80
      targetPort: 8000
  type: LoadBalancer
---
# running mongo container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  labels:
    group: example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongodb
          image: mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: 'max'
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: 'secret'
          ports:
            - containerPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-app-depolyment
  labels:
    group: example
spec:
  replicas: 2
  selector:
    matchLabels:
      app: second-app
      tier: backend
    # matchExpressions:
    # - { key: app, operator: In, values: [second-app, first-app] }
  template:
    metadata:
      labels:
        app: second-app
        tier: backend
    spec:
      containers:
        - name: second-node
          image: manish198646/first-app:2
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            periodSeconds: 10
            initialDelaySeconds: 5
        # - name: ...
        # image: ...
